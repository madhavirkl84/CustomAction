{"version":3,"file":"index.js","sources":["../dist-src/value-to-tree-object.js","../dist-src/create-tree.js","../dist-src/create-commit.js","../dist-src/compose-create-pull-request.js","../dist-src/version.js","../dist-src/index.js"],"sourcesContent":["export async function valueToTreeObject(octokit, owner, repo, path, value) {\n    let mode = \"100644\";\n    if (value !== null && typeof value !== \"string\") {\n        mode = value.mode || mode;\n    }\n    // Text files can be changed through the .content key\n    if (typeof value === \"string\") {\n        return {\n            path,\n            mode: mode,\n            content: value,\n        };\n    }\n    // Binary files need to be created first using the git blob API,\n    // then changed by referencing in the .sha key\n    const { data } = await octokit.request(\"POST /repos/{owner}/{repo}/git/blobs\", {\n        owner,\n        repo,\n        ...value,\n    });\n    const blobSha = data.sha;\n    return {\n        path,\n        mode: mode,\n        sha: blobSha,\n    };\n}\n","import { valueToTreeObject } from \"./value-to-tree-object\";\nexport async function createTree(state, changes) {\n    const { octokit, owner, repo, ownerOrFork, latestCommitSha, latestCommitTreeSha, } = state;\n    const tree = (await Promise.all(Object.keys(changes.files).map(async (path) => {\n        const value = changes.files[path];\n        if (value === null) {\n            // Deleting a non-existent file from a tree leads to an \"GitRPC::BadObjectState\" error,\n            // so we only attempt to delete the file if it exists.\n            try {\n                // https://developer.github.com/v3/repos/contents/#get-contents\n                await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n                    owner: ownerOrFork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                return {\n                    path,\n                    mode: \"100644\",\n                    sha: null,\n                };\n            }\n            catch (error) {\n                return;\n            }\n        }\n        // When passed a function, retrieve the content of the file, pass it\n        // to the function, then return the result\n        if (typeof value === \"function\") {\n            let result;\n            try {\n                const { data: file } = await octokit.request(\"GET /repos/{owner}/{repo}/contents/:path\", {\n                    owner: ownerOrFork,\n                    repo,\n                    ref: latestCommitSha,\n                    path,\n                });\n                result = await value(Object.assign(file, { exists: true }));\n            }\n            catch (error) {\n                // @ts-ignore\n                // istanbul ignore if\n                if (error.status !== 404)\n                    throw error;\n                // @ts-ignore\n                result = await value({ exists: false });\n            }\n            if (result === null || typeof result === \"undefined\")\n                return;\n            return valueToTreeObject(octokit, ownerOrFork, repo, path, result);\n        }\n        return valueToTreeObject(octokit, ownerOrFork, repo, path, value);\n    }))).filter(Boolean);\n    if (tree.length === 0) {\n        return null;\n    }\n    // https://developer.github.com/v3/git/trees/#create-a-tree\n    const { data: { sha: newTreeSha }, } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n        owner: ownerOrFork,\n        repo,\n        base_tree: latestCommitTreeSha,\n        tree,\n    });\n    return newTreeSha;\n}\n","export async function createCommit(state, treeCreated, changes) {\n    const { octokit, repo, ownerOrFork, latestCommitSha } = state;\n    const message = treeCreated\n        ? changes.commit\n        : typeof changes.emptyCommit === \"string\"\n            ? changes.emptyCommit\n            : changes.commit;\n    // https://developer.github.com/v3/git/commits/#create-a-commit\n    const { data: latestCommit } = await octokit.request(\"POST /repos/{owner}/{repo}/git/commits\", {\n        owner: ownerOrFork,\n        repo,\n        message,\n        author: changes.author,\n        committer: changes.committer,\n        tree: state.latestCommitTreeSha,\n        parents: [latestCommitSha],\n    });\n    return latestCommit.sha;\n}\n","import { createTree } from \"./create-tree\";\nimport { createCommit } from \"./create-commit\";\nexport async function composeCreatePullRequest(octokit, { owner, repo, title, body, base, head, createWhenEmpty, changes: changesOption, draft = false, forceFork = false, update = false, }) {\n    if (head === base) {\n        throw new Error('[octokit-plugin-create-pull-request] \"head\" cannot be the same value as \"base\"');\n    }\n    const changes = Array.isArray(changesOption)\n        ? changesOption\n        : [changesOption];\n    if (changes.length === 0)\n        throw new Error('[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array');\n    const state = { octokit, owner, repo };\n    // https://developer.github.com/v3/repos/#get-a-repository\n    const { data: repository, headers } = await octokit.request(\"GET /repos/{owner}/{repo}\", {\n        owner,\n        repo,\n    });\n    const isUser = !!headers[\"x-oauth-scopes\"];\n    if (!repository.permissions) {\n        throw new Error(\"[octokit-plugin-create-pull-request] Missing authentication\");\n    }\n    if (!base) {\n        base = repository.default_branch;\n    }\n    state.ownerOrFork = owner;\n    if (forceFork || (isUser && !repository.permissions.push)) {\n        // https://developer.github.com/v3/users/#get-the-authenticated-user\n        const user = await octokit.request(\"GET /user\");\n        // https://developer.github.com/v3/repos/forks/#list-forks\n        const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n            owner,\n            repo,\n        });\n        const hasFork = forks.data.find(\n        /* istanbul ignore next - fork owner can be null, but we don't test that */\n        (fork) => fork.owner && fork.owner.login === user.data.login);\n        if (!hasFork) {\n            // https://developer.github.com/v3/repos/forks/#create-a-fork\n            await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n                owner,\n                repo,\n            });\n        }\n        state.ownerOrFork = user.data.login;\n    }\n    // https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    const { data: [latestCommit], } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n        owner,\n        repo,\n        sha: base,\n        per_page: 1,\n    });\n    state.latestCommitSha = latestCommit.sha;\n    state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n    const baseCommitTreeSha = latestCommit.commit.tree.sha;\n    for (const change of changes) {\n        let treeCreated = false;\n        if (change.files && Object.keys(change.files).length) {\n            const latestCommitTreeSha = await createTree(state, change);\n            if (latestCommitTreeSha) {\n                state.latestCommitTreeSha = latestCommitTreeSha;\n                treeCreated = true;\n            }\n        }\n        if (treeCreated || change.emptyCommit !== false) {\n            state.latestCommitSha = await createCommit(state, treeCreated, change);\n        }\n    }\n    const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n    if (hasNoChanges && createWhenEmpty === false) {\n        return null;\n    }\n    const branchInfo = await octokit.graphql(`\n    query ($owner: String!, $repo: String!, $head: String!) {\n      repository(name: $repo, owner: $owner) {\n        ref(qualifiedName: $head) {\n          associatedPullRequests(first: 1, states: OPEN) {\n            edges {\n              node {\n                id\n                number\n                url\n              }\n            }\n          }\n        }\n      }\n    }`, {\n        owner: state.ownerOrFork,\n        repo,\n        head,\n    });\n    const branchExists = !!branchInfo.repository.ref;\n    const existingPullRequest = branchInfo.repository.ref?.associatedPullRequests?.edges?.[0]?.node;\n    if (existingPullRequest && !update) {\n        throw new Error(`[octokit-plugin-create-pull-request] Pull request already exists: ${existingPullRequest.url}. Set update=true to enable updating`);\n    }\n    if (branchExists) {\n        // https://docs.github.com/en/rest/git/refs#update-a-reference\n        await octokit.request(\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\", {\n            owner: state.ownerOrFork,\n            repo,\n            sha: state.latestCommitSha,\n            ref: `heads/${head}`,\n            force: true,\n        });\n    }\n    else {\n        // https://developer.github.com/v3/git/refs/#create-a-reference\n        await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n            owner: state.ownerOrFork,\n            repo,\n            sha: state.latestCommitSha,\n            ref: `refs/heads/${head}`,\n        });\n    }\n    const pullRequestOptions = {\n        owner,\n        repo,\n        head: `${state.ownerOrFork}:${head}`,\n        base,\n        title,\n        body,\n        draft,\n    };\n    if (existingPullRequest) {\n        // https://docs.github.com/en/rest/pulls/pulls#update-a-pull-request\n        return await octokit.request(\"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\", {\n            pull_number: existingPullRequest.number,\n            ...pullRequestOptions,\n        });\n    }\n    else {\n        // https://developer.github.com/v3/pulls/#create-a-pull-request\n        return await octokit.request(\"POST /repos/{owner}/{repo}/pulls\", pullRequestOptions);\n    }\n}\n","export const VERSION = \"4.1.1\";\n","import { composeCreatePullRequest } from \"./compose-create-pull-request\";\nimport { VERSION } from \"./version\";\n/**\n * @param octokit Octokit instance\n */\nexport function createPullRequest(octokit) {\n    return {\n        createPullRequest: composeCreatePullRequest.bind(null, octokit),\n    };\n}\nexport { composeCreatePullRequest } from \"./compose-create-pull-request\";\ncreatePullRequest.VERSION = VERSION;\n"],"names":["valueToTreeObject","octokit","owner","repo","path","value","mode","content","data","request","blobSha","sha","createTree","state","changes","ownerOrFork","latestCommitSha","latestCommitTreeSha","tree","Promise","all","Object","keys","files","map","ref","error","result","file","assign","exists","status","filter","Boolean","length","newTreeSha","base_tree","createCommit","treeCreated","message","commit","emptyCommit","latestCommit","author","committer","parents","composeCreatePullRequest","title","body","base","head","createWhenEmpty","changesOption","draft","forceFork","update","Error","Array","isArray","repository","headers","isUser","permissions","default_branch","push","user","forks","hasFork","find","fork","login","per_page","baseCommitTreeSha","change","hasNoChanges","branchInfo","graphql","branchExists","existingPullRequest","associatedPullRequests","edges","node","url","force","pullRequestOptions","pull_number","number","VERSION","createPullRequest","bind"],"mappings":"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"}